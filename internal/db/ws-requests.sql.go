// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ws-requests.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const chanListByUserID = `-- name: ChanListByUserID :many
SELECT "channel"."id", "channel"."channel", "channel"."title", "channel"."default"
FROM "public"."channel"
JOIN "public"."user_channel" ON "user_channel"."chan_id" = "channel"."id"
WHERE "user_channel"."user_id"=$1
`

func (q *Queries) ChanListByUserID(ctx context.Context, userID uuid.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, chanListByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Channel,
			&i.Title,
			&i.Default,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "public"."user"
("id", "username", "given_name", "family_name", "enabled")
VALUES($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID         uuid.UUID
	Username   string
	GivenName  string
	FamilyName string
	Enabled    bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.GivenName,
		arg.FamilyName,
		arg.Enabled,
	)
	return err
}

const getChanByID = `-- name: GetChanByID :one
select "id", "channel", "title"
from "public"."channel"
where "channel"=$1
`

type GetChanByIDRow struct {
	ID      int64
	Channel string
	Title   string
}

func (q *Queries) GetChanByID(ctx context.Context, channel string) (GetChanByIDRow, error) {
	row := q.db.QueryRow(ctx, getChanByID, channel)
	var i GetChanByIDRow
	err := row.Scan(&i.ID, &i.Channel, &i.Title)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT "id", "username", "given_name", "family_name", "enabled"
FROM "public"."user"
WHERE "id"=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.GivenName,
		&i.FamilyName,
		&i.Enabled,
	)
	return i, err
}

const subscribeUserOnChan = `-- name: SubscribeUserOnChan :exec
insert into "public"."user_channel"
("user_id", "chan_id", "can_publish")
values ($1, $2, false)
`

type SubscribeUserOnChanParams struct {
	UserID uuid.UUID
	ChanID int64
}

func (q *Queries) SubscribeUserOnChan(ctx context.Context, arg SubscribeUserOnChanParams) error {
	_, err := q.db.Exec(ctx, subscribeUserOnChan, arg.UserID, arg.ChanID)
	return err
}

const subscribeUserOnDefaultChans = `-- name: SubscribeUserOnDefaultChans :exec
insert into "public"."user_channel"
("user_id", "chan_id", "can_publish")
select
	$1,
	id,
	false
from "public"."channel"
where "channel"."default"=true
`

func (q *Queries) SubscribeUserOnDefaultChans(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, subscribeUserOnDefaultChans, userID)
	return err
}

const userCanPublish = `-- name: UserCanPublish :one
select "can_publish"
from "public"."user_channel"
where "user_id"=$1 and "chan_id"=(select "id" from "public"."channel" where "channel"=$2)
`

type UserCanPublishParams struct {
	UserID  uuid.UUID
	Channel string
}

func (q *Queries) UserCanPublish(ctx context.Context, arg UserCanPublishParams) (bool, error) {
	row := q.db.QueryRow(ctx, userCanPublish, arg.UserID, arg.Channel)
	var can_publish bool
	err := row.Scan(&can_publish)
	return can_publish, err
}

const userListByChanID = `-- name: UserListByChanID :many
SELECT "user"."id", "user"."username", "user"."given_name", "user"."family_name", "user"."enabled"
FROM "public"."user"
JOIN "public"."user_channel" ON "user_channel"."user_id" = "user"."id"
WHERE "user_channel"."chan_id"=$1
`

func (q *Queries) UserListByChanID(ctx context.Context, chanID int64) ([]User, error) {
	rows, err := q.db.Query(ctx, userListByChanID, chanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.GivenName,
			&i.FamilyName,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
